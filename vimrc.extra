





" Basic options
set encoding=utf-8
"set scrolloff=3

" set visualbell
" set cursorline
" set ttyfast
" set ruler
" set backspace=indent,eol,start
" set laststatus=2
" set history=1000
" set undolevels=1000
" set title


" Status line
" set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)

" Leader
let mapleader = ","
let maplocalleader = "\\"

" Make Y not dumb
nnoremap Y y$



" Soft/hard wrapping
set wrap
set textwidth=79
set formatoptions=qrn1


" Use the same symbols as TextMate for tabstops and EOLs
set list
set listchars=tab:▸\ ,eol:¬

" NerdCommenter
if has('eval')
    let NERDCreateDefaultMappings = 0
endif" 
map <Leader>/ <Plug>NERDCommenterToggle

"set equalalways


" Fuck you, help key.
" set fuoptions=maxvert,maxhorz
"inoremap <F1> <ESC>:set invfullscreen<CR>a
"nnoremap <F1> :set invfullscreen<CR>
"vnoremap <F1> :set invfullscreen<CR>

" Fuck you too, manual key
nnoremap K <nop>

au BufRead,BufNewFile *.scss set filetype=scss

au BufRead,BufNewFile *.template set filetype=html
au BufRead,BufNewFile *.page set filetype=markdown

au BufNewFile,BufRead *.js setlocal foldmethod=marker
au BufNewFile,BufRead *.js setlocal foldmarker={,}

au BufNewFile,BufRead *.vim setlocal foldmethod=marker

" Map auto complete of (, ", ', [
"inoremap $1 ()<esc>i
"inoremap $2 []<esc>i
"inoremap $3 {}<esc>i
"inoremap $4 {<esc>o}<esc>O
"inoremap $q ''<esc>i
"inoremap $e ""<esc>i
"inoremap $t <><esc>i

" Sort CSS
"map <leader>S ?{<CR>jV/^\s*\}?$<CR>k:sort<CR>:noh<CR>

" Clean whitespace
"map <leader>W :%s/\s\+$//<cr>:let @/=''<CR>

" Ack
map <leader>a :Ack

" Yankring
nnoremap <silent> <leader>y :YRShow<cr>

" Formatting, TextMate-style
map <leader>q gqip
" Reindent File
map <D-[> gg=G

" Google's JSLint
au BufNewFile,BufRead *.js set makeprg=gjslint\ %
au BufNewFile,BufRead *.js set errorformat=%-P-----\ FILE\ \ :\ \ %f\ -----,Line\ %l\\,\ E:%n:\ %m,%-Q,%-GFound\ %s,%-GSome\ %s,%-Gfixjsstyle%s,%-Gscript\ can\ %s,%-G

" TESTING GOAT APPROVES OF THESE LINES
nmap <leader>fn :cn<cr>
nmap <leader>fp :cp<cr>

" Faster Esc
inoremap jj <ESC>
inoremap kk <ESC>

" Make selecting inside an HTML tag less dumb
"nnoremap Vit vitVkoj
"nnoremap Vat vatV

" Edit vim stuff.
nnoremap <leader>ev <C-w>s<C-w>j<C-w>L:e ~/.vim/vimrc<cr>

" Reload VIMRC
map <leader>er :source ~/.vimrc<CR>:filetype detect<CR>:exe ":echo 'vimrc reloaded'"<CR>

" Save when losing focus
:au FocusLost silent! :wa

" Autosave Sessions
function! MySaveWindowSession()
  if exists("v:this_session") && v:this_session !~ 'Session\.vim$' && v:this_session != ""
    execute "mks! ".v:this_session
  else
    echo "No Session"
  endif
endfunction
au VimLeave * call MySaveWindowSession()


" fix sparkup and supertab issue
let g:sparkupNextMapping = '<c-x>'

" Tags!
let Tlist_Ctags_Cmd = "/usr/local/bin/ctags"
let Tlist_WinWidth = 50
let Tlist_Show_One_File = 1
map <F4> :TlistToggle<cr>
"map <leader>T :!/usr/local/bin/ctags --exclude='**/ckeditor' -R . $(test -f .venv && echo ~/lib/virtualenvs/`cat .venv`)<CR>

" Gundo
nnoremap U :GundoToggle<CR>
let g:gundo_debug = 0
let g:gundo_preview_bottom = 1

" Next ()
vnoremap <silent> inb :<C-U>normal! f(vib<cr>
onoremap <silent> inb :<C-U>normal! f(vib<cr>
vnoremap <silent> anb :<C-U>normal! f(vab<cr>
onoremap <silent> anb :<C-U>normal! f(vab<cr>
vnoremap <silent> in( :<C-U>normal! f(vi(<cr>
onoremap <silent> in( :<C-U>normal! f(vi(<cr>
vnoremap <silent> an( :<C-U>normal! f(va(<cr>
onoremap <silent> an( :<C-U>normal! f(va(<cr>

" Next {}
vnoremap <silent> inB :<C-U>normal! f{viB<cr>
onoremap <silent> inB :<C-U>normal! f{viB<cr>
vnoremap <silent> anB :<C-U>normal! f{vaB<cr>
onoremap <silent> anB :<C-U>normal! f{vaB<cr>
vnoremap <silent> in{ :<C-U>normal! f{vi{<cr>
onoremap <silent> in{ :<C-U>normal! f{vi{<cr>
vnoremap <silent> an{ :<C-U>normal! f{va{<cr>
onoremap <silent> an{ :<C-U>normal! f{va{<cr>

" Next []
vnoremap <silent> ind :<C-U>normal! f[vi[<cr>
onoremap <silent> ind :<C-U>normal! f[vi[<cr>
vnoremap <silent> and :<C-U>normal! f[va[<cr>
onoremap <silent> and :<C-U>normal! f[va[<cr>
vnoremap <silent> in[ :<C-U>normal! f[vi[<cr>
onoremap <silent> in[ :<C-U>normal! f[vi[<cr>
vnoremap <silent> an[ :<C-U>normal! f[va[<cr>
onoremap <silent> an[ :<C-U>normal! f[va[<cr>

" Next <>
vnoremap <silent> in< :<C-U>normal! f<vi<<cr>
onoremap <silent> in< :<C-U>normal! f<vi<<cr>
vnoremap <silent> an< :<C-U>normal! f<va<<cr>
onoremap <silent> an< :<C-U>normal! f<va<<cr>

" Next ''
vnoremap <silent> in' :<C-U>normal! f'vi'<cr>
onoremap <silent> in' :<C-U>normal! f'vi'<cr>
vnoremap <silent> an' :<C-U>normal! f'va'<cr>
onoremap <silent> an' :<C-U>normal! f'va'<cr>

" Next ""
vnoremap <silent> in" :<C-U>normal! f"vi"<cr>
onoremap <silent> in" :<C-U>normal! f"vi"<cr>
vnoremap <silent> an" :<C-U>normal! f"va"<cr>
onoremap <silent> an" :<C-U>normal! f"va"<cr>

" Skipreturn
inoremap <s-cr> <esc>A<cr>
inoremap <D-cr> <esc>A;<cr>
au BufNewFile,BufRead *.html nnoremap <s-cr> vit<esc>a<cr><esc>vito<esc>i<cr><esc>

" Syntastic
let g:syntastic_enable_signs=1
let g:syntastic_disabled_filetypes = ['html', 'python']

nmap <silent> <f3> :ErrorsToggle<cr>
command! ErrorsToggle call ErrorsToggle()
function! ErrorsToggle()
  if exists("w:is_error_window")
    unlet w:is_error_window
    exec "q"
  else
    exec "Errors"
    lopen
    let w:is_error_window = 1
  endif
endfunction

" ZoomWin configuration
map <Leader><Leader> <Plug>ZoomWin

" Remember last location in file
if has("autocmd")
  au BufReadPost * if line("'\"") > 0 && line("'\"") <= line("$")
    \| exe "normal g'\"" | endif
endif

" Easy Motion
let EasyMotion_do_mapping = 0
nnoremap <silent> <Leader>w      :call EasyMotionW(0)<CR>¬
vnoremap <silent> <Leader>w :<C-U>call EasyMotionW(1)<CR>

" FuzzyFinder
map <leader>s :FufBufferTag<CR>

" MacVim
if has('gui_running')
    "set guifont=Menlo:h12
    "set guifont=AndaleMono:h12
    set guifont=DejaVu\ Sans\ Mono:h12

    set go-=T
    set go-=l
    set go-=L
    set go-=r
    set go-=R

    if has("gui_macvim")
        macmenu &File.New\ Tab key=<nop>
        map <leader>tp <Plug>PeepOpen

        an 10.390 File.Save\ Session call MySaveWindowSession()
        macm File.Save\ Session key=<c-D-s>

        noremap <leader>cc <ESC>:PickHEX<CR>


        let macvim_hig_shift_movement = 1
    end

    

    set colorcolumn=0

    let g:sparkupExecuteMapping='<D-e>'

    set spell spelllang=en_us
    highlight SpellBad term=underline gui=undercurl guisp=Orange

	inoremenu <silent>&Plugin.QuickCursor.CloseBuffer <Esc>:w<cr>:BufClose<cr>
	nnoremenu <silent>&Plugin.QuickCursor.CloseBuffer :w<cr>:BufClose<cr>
else
    set nocursorline
endif

" Remap ; key
nnoremap ; :




" CamelCaseMotion
map <silent> w <Plug>CamelCaseMotion_w
map <silent> b <Plug>CamelCaseMotion_b
map <silent> e <Plug>CamelCaseMotion_e
sunmap w
sunmap b
sunmap e

" Color scheme (terminal)


set background=dark
"set background=light
let g:solarized_termtrans=1
let g:solarized_termcolors=16

"colorscheme twilight2
colorscheme solarized

" Test Status
hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
hi Modified guibg=orange guifg=black ctermbg=lightred ctermfg=black

function! MyStatusLine(mode)
    let statusline=""
    if a:mode == 'Enter'
        let statusline.="%#StatColor#"
    endif
    let statusline.="\(%n\)\ %f\ "
    if a:mode == 'Enter'
        let statusline.="%*"
    endif
    let statusline.="%#Modified#%m"
    if a:mode == 'Leave'
        let statusline.="%*%r"
    elseif a:mode == 'Enter'
        let statusline.="%r%*"
    endif
    let statusline .= "\ (%l/%L,\ %c)\ %P%=%h%w\ %y\ [%{&encoding}:%{&fileformat}]\ \ "
    return statusline
endfunction

au WinEnter * setlocal statusline=%!MyStatusLine('Enter')
au WinLeave * setlocal statusline=%!MyStatusLine('Leave')
set statusline=%!MyStatusLine('Enter')

function! InsertStatuslineColor(mode)
  if a:mode == 'i'
    hi StatColor guibg=orange ctermbg=lightred
  elseif a:mode == 'r'
    hi StatColor guibg=#e454ba ctermbg=magenta
  elseif a:mode == 'v'
    hi StatColor guibg=#e454ba ctermbg=magenta
  else
    hi StatColor guibg=red ctermbg=red
  endif
endfunction 

au InsertEnter * call InsertStatuslineColor(v:insertmode)
au InsertLeave * hi StatColor guibg=#95e454 guifg=black ctermbg=lightgreen ctermfg=black
